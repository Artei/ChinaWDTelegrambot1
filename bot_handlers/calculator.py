from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
import logging
import re

from core.calculator_logic import calculate_total_cost, format_result_for_user
from core.config import settings
import keyboards as kb

router = Router()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ ---

def parse_engine_volume(text: str) -> int | None:
    """
    –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ —Å–º¬≥.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã "1500", "1.5", "1,5", "1.5–ª", "2.0T" –∏ —Ç.–¥.
    """
    # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –∏ —É–¥–∞–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleaned_text = text.lower().replace(',', '.').strip()
    # –£–¥–∞–ª—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ—á–∫—É –¥–ª—è –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª
    cleaned_text = re.sub(r"[^\d.]", "", cleaned_text)

    if not cleaned_text:
        return None

    try:
        volume = float(cleaned_text)
        # –ï—Å–ª–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 100, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—Ç—Ä—ã, –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–º¬≥
        if 0 < volume < 100:
            return int(volume * 1000)
        # –ò–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ —É–∂–µ –≤ —Å–º¬≥
        return int(volume)
    except (ValueError, TypeError):
        return None


# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) ---

class CarCalculationStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ."""
    waiting_for_car_price_cny = State()
    waiting_for_year = State()
    waiting_for_fuel_type = State()
    waiting_for_engine_volume = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def get_fuel_type_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞."""
    buttons = [
        [
            InlineKeyboardButton(text="–ë–µ–Ω–∑–∏–Ω", callback_data="fuel_type:–ë–µ–Ω–∑–∏–Ω"),
            InlineKeyboardButton(text="–î–∏–∑–µ–ª—å", callback_data="fuel_type:–î–∏–∑–µ–ª—å")
        ],
        [
            InlineKeyboardButton(text="–ì–∏–±—Ä–∏–¥", callback_data="fuel_type:–ì–∏–±—Ä–∏–¥"),
            InlineKeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–æ", callback_data="fuel_type:–≠–ª–µ–∫—Ç—Ä–æ")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_cancel_keyboard(placeholder: str | None = None) -> types.ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –∏ –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞."""
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder=placeholder
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ ---

@router.message(F.text == "üöó –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
@router.callback_query(F.data == "main_menu:calculator")
async def start_calculation(message: types.Message | types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–ª–±—ç–∫
    if isinstance(message, types.CallbackQuery):
        msg = message.message
        await message.answer() # –ó–∞–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    else:
        msg = message

    await state.clear()  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
    # –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await state.update_data(payer_type='–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ')
    await msg.answer(
        "–í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ –ö–∏—Ç–∞—è. –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –≤ –ö–∏—Ç–∞–µ (—é–∞–Ω–∏)",
        reply_markup=get_cancel_keyboard(placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö (CNY)...")
    )
    await state.set_state(CarCalculationStates.waiting_for_car_price_cny)

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_calculation(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—á–µ—Ç–∞ –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏."""
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    is_admin = message.from_user.id in settings.bot.admin_ids
    await message.answer(
        "–†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=kb.get_main_inline_keyboard(is_admin)
    )

@router.message(CarCalculationStates.waiting_for_car_price_cny)
async def process_car_price(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞."""
    try:
        price = float(message.text.replace(',', '.').strip())
        if price <= 0:
            raise ValueError("–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        await state.update_data(car_price_cny=price)
        await message.answer(
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∞. –¢–µ–ø–µ—Ä—å –Ω—É–∂–µ–Ω –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞.",
            reply_markup=get_cancel_keyboard(placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023)...")
        )
        await state.set_state(CarCalculationStates.waiting_for_year)
    except (ValueError, TypeError):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).")

@router.message(CarCalculationStates.waiting_for_year)
async def process_year(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞."""
    try:
        year = int(message.text.strip())
        # –ü—Ä–æ—Å—Ç–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if not (1980 < year < 2026):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥.")
        await state.update_data(year=year)
        # –¢–∏–ø –∫—É–∑–æ–≤–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await state.update_data(car_body_type='–õ–µ–≥–∫–æ–≤–æ–π')
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞:",
            reply_markup=get_fuel_type_keyboard()
        )
        await state.set_state(CarCalculationStates.waiting_for_fuel_type)
    except (ValueError, TypeError):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2022).")

@router.callback_query(CarCalculationStates.waiting_for_fuel_type, F.data.startswith("fuel_type:"))
async def process_fuel_type(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è."""
    fuel_type = callback.data.split(":")[1]
    await state.update_data(fuel_type=fuel_type)

    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç.
    await callback.message.delete()

    # –î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –Ω–µ –Ω—É–∂–µ–Ω –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è
    if fuel_type == "–≠–ª–µ–∫—Ç—Ä–æ":
        await state.update_data(engine_volume=0) # –°—Ç–∞–≤–∏–º 0, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö
        await state.update_data(engine_power=0)  # –ú–æ—â–Ω–æ—Å—Ç—å –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
        # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞—Å—á–µ—Ç—É
        await process_and_calculate(callback.message, state)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —è–≤–ª—è–µ—Ç—Å—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º, –∏ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.
        await callback.message.answer(
            f"–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {fuel_type}. –¢–µ–ø–µ—Ä—å –Ω—É–∂–µ–Ω –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500, 1.5 –∏–ª–∏ 2.0–ª).",
            reply_markup=get_cancel_keyboard(placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1500, 1.5 –∏–ª–∏ 2.0–ª")
        )
        await state.set_state(CarCalculationStates.waiting_for_engine_volume)
    await callback.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ

async def process_and_calculate(message: types.Message, state: FSMContext):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
    user_data = await state.get_data()
    await state.clear()

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–∞—á–∞–ª–∏ —Ä–∞—Å—á–µ—Ç
    calculating_msg = await message.answer("‚è≥ –í—ã–ø–æ–ª–Ω—è—é —Ä–∞—Å—á–µ—Ç...", reply_markup=ReplyKeyboardRemove())

    try:
        result = calculate_total_cost(user_data=user_data, settings=settings)
        response_text = format_result_for_user(result)
        is_admin = message.from_user.id in settings.bot.admin_ids
        await message.answer(
            response_text,
            parse_mode="HTML",
            reply_markup=kb.get_main_inline_keyboard(is_admin)
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ: {e}", exc_info=True)
        is_admin = message.from_user.id in settings.bot.admin_ids
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=kb.get_main_inline_keyboard(is_admin)
        )
    finally:
        await calculating_msg.delete()


@router.message(CarCalculationStates.waiting_for_engine_volume)
async def process_engine_volume_and_calculate(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—á–µ—Ç."""
    volume = parse_engine_volume(message.text)

    if volume is None or volume <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–º.\n–ù–∞–ø—Ä–∏–º–µ—Ä: 1500, 1.5, 2.0–ª, 2.4 T")
        return

    await state.update_data(engine_volume=volume)
    await state.update_data(engine_power=0)  # –ú–æ—â–Ω–æ—Å—Ç—å –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç
    await process_and_calculate(message, state)