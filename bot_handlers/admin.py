import uuid
import logging
from aiogram import Router, F, types
from aiogram.filters import Filter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.filters.command import Command

from core.config import settings
from core.faq_manager import load_faq_data, save_faq_data
from core.settings_manager import save_settings
import keyboards as kb

router = Router()
# –£–ë–ò–†–ê–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–´–ô –§–ò–õ–¨–¢–†, –¢–ê–ö –ö–ê–ö –û–ù –ú–ï–®–ê–ï–¢ channel_post
# router.message.filter(AdminFilter())
# router.callback_query.filter(AdminFilter())


# --- FSM –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
class AdminStates(StatesGroup):
    waiting_for_cny_rate = State()
    waiting_for_eur_rate = State()
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π –∏ —Å–±–æ—Ä–æ–≤
    waiting_for_bank_commission = State()
    waiting_for_company_commission = State()
    waiting_for_china_expenses = State()
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—à–ª–∏–Ω
    waiting_for_duty_rates = State()
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É—Ç–∏–ª—å—Å–±–æ—Ä–∞
    waiting_for_recycling_fee_under_3 = State()
    waiting_for_recycling_fee_over_3 = State()
    faq_add_question = State()
    faq_add_answer = State()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---

def get_admin_main_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    buttons = [
        [InlineKeyboardButton(text="üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º", callback_data="admin_calculator_menu")],
        [InlineKeyboardButton(text="üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FAQ", callback_data="admin_faq_menu")],
        # [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∏", callback_data="admin_broadcast_menu")],
        # [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_calculator_settings_keyboard() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞."""
    buttons = [
        [InlineKeyboardButton(text="–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data="admin_set_rates")],
        [InlineKeyboardButton(text="–ö–æ–º–∏—Å—Å–∏–∏ –∏ —Ä–∞—Å—Ö–æ–¥—ã", callback_data="admin_set_fees")],
        [InlineKeyboardButton(text="–¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—à–ª–∏–Ω—ã", callback_data="admin_set_duties")],
        [InlineKeyboardButton(text="–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä", callback_data="admin_set_recycling_fee")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_faq_management_keyboard() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FAQ."""
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="faq_add")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="faq_delete_list")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_faq_delete_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ FAQ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    faq_data = load_faq_data()
    buttons = []
    for key, data in faq_data.items():
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–Ω–æ–ø–∫–µ
        question_text = data['question'][:50] + '...' if len(data['question']) > 50 else data['question']
        buttons.append([InlineKeyboardButton(
            text=question_text,
            callback_data=f"faq_delete_confirm_{key}"
        )])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é FAQ", callback_data="admin_faq_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_duty_age_category_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—à–ª–∏–Ω."""
    buttons = [
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–¥–æ 3 –ª–µ—Ç", –æ–Ω–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–Ω–∞—á–µ
        # [InlineKeyboardButton(text="–î–æ 3 –ª–µ—Ç", callback_data="duty_age_0_3")],
        [InlineKeyboardButton(text="–û—Ç 3 –¥–æ 5 –ª–µ—Ç", callback_data="duty_age_3_5")],
        [InlineKeyboardButton(text="–°—Ç–∞—Ä—à–µ 5 –ª–µ—Ç", callback_data="duty_age_older_5")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_calculator_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_admin_cancel_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö FSM (–∏–Ω–ª–∞–π–Ω)."""
    buttons = [
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_action")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_back_and_cancel_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–ù–∞–∑–∞–¥' –∏ '–û—Ç–º–µ–Ω–∞'."""
    buttons = [
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_step_back"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_action")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def _get_calculator_settings_text() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞."""
    return (
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: `1 ¬• = {settings.rates.cny_to_rub} ‚ÇΩ`\n"
        f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: `1 ‚Ç¨ = {settings.rates.eur_to_rub} ‚ÇΩ`\n\n"
        f"–ö–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞: `{settings.fees.bank_commission_rub}`\n"
        f"–ö–æ–º–∏—Å—Å–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: `{settings.fees.company_commission_rub}`\n"
        f"–†–∞—Å—Ö–æ–¥—ã –≤ –ö–∏—Ç–∞–µ: `{settings.fees.china_expenses_cny} ¬•`\n"
        f"–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä: `{settings.fees.customs_fee_rub} ‚ÇΩ`\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
    ).replace(",", " ")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---

@router.message(F.text == "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", AdminFilter())
@router.callback_query(F.data == "main_menu:admin", AdminFilter())
async def show_admin_menu(message: types.Message | types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    if isinstance(message, types.CallbackQuery):
        msg = message.message
        await message.answer()
    else:
        msg = message
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=get_admin_main_keyboard())

@router.callback_query(F.data == "admin_main_menu", AdminFilter())
async def back_to_admin_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏."""
    await callback.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=get_admin_main_keyboard())
    await callback.answer()

@router.callback_query(F.data == "admin_calculator_menu", AdminFilter())
async def show_calculator_settings(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏."""
    text = _get_calculator_settings_text()
    await callback.message.edit_text(
        text,
        reply_markup=get_calculator_settings_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.in_({"admin_set_fees", "admin_set_recycling_fee"}), AdminFilter())
async def section_in_development(callback: types.CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."""
    await callback.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)


@router.callback_query(F.data == "admin_set_duties", AdminFilter())
async def show_duty_age_categories(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ—à–ª–∏–Ω."""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—à–ª–∏–Ω:",
        reply_markup=get_duty_age_category_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "admin_set_recycling_fee", AdminFilter())
async def start_setting_recycling_fee(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–±–æ—Ä–∞."""
    await state.clear()
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–∏–π —Å–±–æ—Ä –¥–ª—è –∞–≤—Ç–æ <b>–º–ª–∞–¥—à–µ 3 –ª–µ—Ç</b>: `{settings.customs.recycling.under_3_years} ‚ÇΩ`.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
        reply_markup=get_admin_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_recycling_fee_under_3)
    await callback.answer()

async def _ask_for_recycling_over_3(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–±–æ—Ä –¥–ª—è –∞–≤—Ç–æ —Å—Ç–∞—Ä—à–µ 3 –ª–µ—Ç."""
    await message.answer(
        f"–¢–µ–∫—É—â–∏–π —Å–±–æ—Ä –¥–ª—è –∞–≤—Ç–æ <b>—Å—Ç–∞—Ä—à–µ 3 –ª–µ—Ç</b>: `{settings.customs.recycling.over_3_years} ‚ÇΩ`.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
        reply_markup=get_admin_back_and_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_recycling_fee_over_3)

@router.message(AdminStates.waiting_for_recycling_fee_under_3, AdminFilter())
async def process_recycling_fee_under_3(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–±–æ—Ä –¥–ª—è –∞–≤—Ç–æ –º–ª–∞–¥—à–µ 3 –ª–µ—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–ª—è —Å—Ç–∞—Ä—à–µ 3 –ª–µ—Ç."""
    try:
        fee = float(message.text.replace(',', '.').strip())
        if fee < 0:
            raise ValueError("–°–±–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
        await state.update_data(under_3_years=fee)
        
        await _ask_for_recycling_over_3(message, state)

    except (ValueError, TypeError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_admin_cancel_keyboard()
        )


@router.message(AdminStates.waiting_for_recycling_fee_over_3, AdminFilter())
async def process_recycling_fee_over_3_and_save(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ç–æ—Ä–æ–π —Å–±–æ—Ä, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    try:
        fee_over_3 = float(message.text.replace(',', '.').strip())
        if fee_over_3 < 0:
            raise ValueError("–°–±–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")

        data = await state.get_data()
        fee_under_3 = data['under_3_years']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–∞–º—è—Ç–∏
        settings.customs.recycling.under_3_years = fee_under_3
        settings.customs.recycling.over_3_years = fee_over_3
        
        save_settings()
        await state.clear()

        await message.answer("‚úÖ <b>–°—Ç–∞–≤–∫–∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–±–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>", parse_mode="HTML")

        text = _get_calculator_settings_text()
        await message.answer(
            text,
            reply_markup=get_calculator_settings_keyboard(),
            parse_mode="HTML"
        )
        
    except (ValueError, TypeError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_admin_cancel_keyboard()
        )


@router.callback_query(F.data.startswith("duty_age_"), AdminFilter())
async def start_setting_duty_rates(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –ø–æ—à–ª–∏–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    age_category_key = callback.data.replace("duty_age_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞–≤–æ–∫ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    duty_rates_dict = getattr(settings.customs.duty, age_category_key.replace("-", "_") + "_years", {})
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
    current_rates_str = "\n".join([f"`{vol}: {rate}`" for vol, rate in sorted(duty_rates_dict.items())])
    
    await state.update_data(age_category_key=age_category_key)
    await state.set_state(AdminStates.waiting_for_duty_rates)

    await callback.message.edit_text(
        f"<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—à–ª–∏–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{age_category_key.replace('_', ' ')}'</b>\n\n"
        f"–¢–µ–∫—É—â–∏–µ —Å—Ç–∞–≤–∫–∏ (–æ–±—ä–µ–º –¥–æ, ‚Ç¨ –∑–∞ —Å–º¬≥):\n{current_rates_str}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–º–∞–∫—Å_–æ–±—ä–µ–º:—Å—Ç–∞–≤–∫–∞_–µ–≤—Ä–æ`.\n"
        "–ö–∞–∂–¥–∞—è —Å—Ç–∞–≤–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "`1000:1.5`\n`1500:1.7`\n`99999:3.6`",
        reply_markup=get_admin_cancel_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(AdminStates.waiting_for_duty_rates, AdminFilter())
async def process_duty_rates(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏ –ø–æ—à–ª–∏–Ω."""
    new_rates_text = message.text
    data = await state.get_data()
    age_category_key = data.get("age_category_key")

    try:
        new_rates_dict = {}
        lines = new_rates_text.strip().split('\n')
        if not lines or not lines[0]:
            raise ValueError("–í–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            
        for line in lines:
            if ':' not in line:
                raise ValueError("–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏–µ.")
            vol_str, rate_str = line.split(':', 1)
            vol = int(vol_str.strip())
            rate = float(rate_str.strip().replace(',', '.'))
            if vol <= 0 or rate < 0:
                raise ValueError("–û–±—ä–µ–º –∏ —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏.")
            new_rates_dict[vol] = rate
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ–≤–∞—Ä—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        age_attr_key = age_category_key.replace("-", "_") + "_years"
        setattr(settings.customs.duty, age_attr_key, new_rates_dict)
        
        save_settings()
        await state.clear()
        
        await message.answer("‚úÖ <b>–°—Ç–∞–≤–∫–∏ —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—à–ª–∏–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>", parse_mode="HTML")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        text = _get_calculator_settings_text()
        await message.answer(
            text,
            reply_markup=get_calculator_settings_keyboard(),
            parse_mode="HTML"
        )

    except (ValueError, TypeError) as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: {e}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç `–º–∞–∫—Å_–æ–±—ä–µ–º:—Å—Ç–∞–≤–∫–∞_–µ–≤—Ä–æ`, –∫–∞–∂–¥–∞—è —Å—Ç–∞–≤–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "`1000:1.5`\n`1500:1.7`",
            reply_markup=get_admin_cancel_keyboard()
        )

@router.callback_query(F.data == "admin_step_back", AdminFilter())
async def admin_step_back_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –¥–∏–∞–ª–æ–≥–∞—Ö."""
    current_state = await state.get_state()
    await callback.answer()

    # --- –î–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ ---
    if current_state == AdminStates.waiting_for_eur_rate:
        await start_setting_rates(callback, state)

    # --- –î–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π ---
    elif current_state == AdminStates.waiting_for_company_commission:
        await start_setting_fees(callback, state)
    elif current_state == AdminStates.waiting_for_china_expenses:
        await _ask_for_company_commission(callback.message, state)

    # --- –î–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ç–∏–ª—å—Å–±–æ—Ä–∞ ---
    elif current_state == AdminStates.waiting_for_recycling_fee_over_3:
        await start_setting_recycling_fee(callback, state)
        
    # --- –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è FAQ ---
    elif current_state == AdminStates.faq_add_answer:
        await start_adding_faq(callback, state)


@router.callback_query(F.data == "admin_cancel_action", AdminFilter())
async def cancel_admin_action(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç FSM –≤ –∞–¥–º–∏–Ω–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é."""
    current_state = await state.get_state()
    await state.clear()
    await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    # –ü—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω—É–∂–Ω–æ–µ –º–µ–Ω—é
    if current_state and 'faq' in current_state:
        faq_data = load_faq_data()
        count = len(faq_data)
        await callback.message.edit_text(
            f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FAQ. –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {count}.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_faq_management_keyboard()
        )
    else:
        # –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        text = _get_calculator_settings_text()
        await callback.message.edit_text(
            text,
            reply_markup=get_calculator_settings_keyboard(),
            parse_mode="HTML"
        )


# --- –õ–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç ---

@router.callback_query(F.data == "admin_set_rates", AdminFilter())
async def start_setting_rates(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç."""
    await state.clear()
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å —é–∞–Ω—è –∫ —Ä—É–±–ª—é...",
        reply_markup=get_admin_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_cny_rate)
    await callback.answer()

async def _ask_for_eur_rate(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –∫—É—Ä—Å–∞ –µ–≤—Ä–æ."""
    await message.answer(
        "–ö—É—Ä—Å —é–∞–Ω—è –ø—Ä–∏–Ω—è—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –µ–≤—Ä–æ –∫ —Ä—É–±–ª—é...",
        reply_markup=get_admin_back_and_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_eur_rate)

@router.message(AdminStates.waiting_for_cny_rate, AdminFilter())
async def process_cny_rate(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –∫—É—Ä—Å —é–∞–Ω—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫—É—Ä—Å –µ–≤—Ä–æ."""
    try:
        new_rate = float(message.text.replace(',', '.').strip())
        if new_rate <= 0:
            raise ValueError("–ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
        await state.update_data(cny_rate=new_rate)
        await _ask_for_eur_rate(message, state)
    except (ValueError, TypeError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `12.5`).",
            reply_markup=get_admin_cancel_keyboard()
        )

@router.message(AdminStates.waiting_for_eur_rate, AdminFilter())
async def process_eur_rate_and_save(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –∫—É—Ä—Å –µ–≤—Ä–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        new_eur_rate = float(message.text.replace(',', '.').strip())
        if new_eur_rate <= 0:
            raise ValueError("–ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")

        data = await state.get_data()
        new_cny_rate = data.get('cny_rate')

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–∞–º—è—Ç–∏
        settings.rates.cny_to_rub = new_cny_rate
        settings.rates.eur_to_rub = new_eur_rate
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª
        save_settings()

        await state.clear()
        
        await message.answer("‚úÖ <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>", parse_mode="HTML")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
        text = _get_calculator_settings_text()
        await message.answer(
            text,
            reply_markup=get_calculator_settings_keyboard(),
            parse_mode="HTML"
        )

    except (ValueError, TypeError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `100.0`).",
            reply_markup=get_admin_cancel_keyboard()
        )

# --- –õ–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ ---

@router.callback_query(F.data == "admin_set_fees", AdminFilter())
async def start_setting_fees(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π."""
    await state.clear()
    # –í –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    current_percent = settings.fees.bank_commission_percent * 100
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞: `{current_percent:.2f}%`.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∏—Å—Å–∏—é –±–∞–Ω–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, `2.5`):",
        reply_markup=get_admin_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_bank_commission)
    await callback.answer()

async def _ask_for_company_commission(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –∫–æ–º–∏—Å—Å–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏."""
    await message.answer(
         f"–¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: `{settings.fees.company_commission_rub} ‚ÇΩ`.\n\n"
         f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Ä—É–±–ª—è—Ö:",
         reply_markup=get_admin_back_and_cancel_keyboard(),
         parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_company_commission)

async def _ask_for_china_expenses(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ –ö–∏—Ç–∞–µ."""
    await message.answer(
         f"–¢–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –ö–∏—Ç–∞–µ: `{settings.fees.china_expenses_rub} ‚ÇΩ`.\n\n"
         f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ —Ä—É–±–ª—è—Ö:",
         reply_markup=get_admin_back_and_cancel_keyboard(),
         parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_china_expenses)

@router.message(AdminStates.waiting_for_bank_commission, AdminFilter())
async def process_bank_commission(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –±–∞–Ω–∫–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –∫–æ–º–ø–∞–Ω–∏–∏."""
    try:
        new_percent = float(message.text.replace(',', '.').strip())
        if not (0 <= new_percent <= 100):
            raise ValueError("–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100.")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –¥–æ–ª—é –æ—Ç –µ–¥–∏–Ω–∏—Ü—ã
        await state.update_data(bank_commission=new_percent / 100.0)
        await _ask_for_company_commission(message, state)
    except (ValueError, TypeError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 (–Ω–∞–ø—Ä–∏–º–µ—Ä, `2.5`).",
            reply_markup=get_admin_cancel_keyboard()
        )


@router.message(AdminStates.waiting_for_company_commission, AdminFilter())
async def process_company_commission(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –≤ –ö–∏—Ç–∞–µ."""
    try:
        new_fee = float(message.text.replace(',', '.').strip())
        if new_fee < 0:
            raise ValueError("–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
            
        await state.update_data(company_commission=new_fee)
        await _ask_for_china_expenses(message, state)
    except (ValueError, TypeError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_admin_cancel_keyboard()
        )


@router.message(AdminStates.waiting_for_china_expenses, AdminFilter())
async def process_china_expenses_and_save(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –≤ –ö–∏—Ç–∞–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        new_expenses = float(message.text.replace(',', '.').strip())
        if new_expenses < 0:
            raise ValueError("–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")

        data = await state.get_data()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–∞–º—è—Ç–∏
        settings.fees.bank_commission_percent = data['bank_commission']
        settings.fees.company_commission_rub = data['company_commission']
        settings.fees.china_expenses_rub = new_expenses
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª
        save_settings()

        await state.clear()
        
        await message.answer("‚úÖ <b>–ö–æ–º–∏—Å—Å–∏–∏ –∏ —Ä–∞—Å—Ö–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>", parse_mode="HTML")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        text = _get_calculator_settings_text()
        await message.answer(
            text,
            reply_markup=get_calculator_settings_keyboard(),
            parse_mode="HTML"
        )

    except (ValueError, TypeError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_admin_cancel_keyboard()
        )


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FAQ ---

@router.callback_query(F.data == "admin_faq_menu", AdminFilter())
async def show_faq_management_menu(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FAQ."""
    await state.clear()
    faq_data = load_faq_data()
    count = len(faq_data)
    await callback.message.edit_text(
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FAQ. –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {count}.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_faq_management_keyboard()
    )
    await callback.answer()


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ FAQ ---

@router.callback_query(F.data == "faq_add", AdminFilter())
async def start_adding_faq(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""
    await state.set_state(AdminStates.faq_add_question)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:",
        reply_markup=get_admin_cancel_keyboard()
    )
    await callback.answer()

async def _ask_for_faq_answer(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å."""
    await message.answer(
        "–í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
        reply_markup=get_admin_back_and_cancel_keyboard()
    )
    await state.set_state(AdminStates.faq_add_answer)

@router.message(AdminStates.faq_add_question, AdminFilter())
async def process_faq_question(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
    await state.update_data(question=message.text)
    await _ask_for_faq_answer(message, state)

@router.message(AdminStates.faq_add_answer, AdminFilter())
async def process_faq_answer(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å."""
    data = await state.get_data()
    question = data.get('question')
    answer = message.text

    faq_data = load_faq_data()
    new_key = str(uuid.uuid4())
    faq_data[new_key] = {"question": question, "answer": answer}
    save_faq_data(faq_data)

    await state.clear()
    await message.answer(
        "‚úÖ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ FAQ!",
        parse_mode="HTML"
    )
    
    count = len(faq_data)
    await message.answer(
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FAQ. –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {count}.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_faq_management_keyboard()
    )


# --- –£–¥–∞–ª–µ–Ω–∏–µ FAQ ---
@router.callback_query(F.data == "faq_delete_list", AdminFilter())
async def show_faq_delete_list(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    faq_data = load_faq_data()
    if not faq_data:
        await callback.answer("–°–ø–∏—Å–æ–∫ FAQ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.", show_alert=True)
        return

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=get_faq_delete_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("faq_delete_confirm_"), AdminFilter())
async def confirm_faq_deletion(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞."""
    question_id = callback.data.split("_")[-1]

    faq_data = load_faq_data()
    if question_id in faq_data:
        del faq_data[question_id]
        save_faq_data(faq_data)
        await callback.answer("–í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω.", show_alert=True)
    else:
        await callback.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    faq_data = load_faq_data()
    if not faq_data:
        await callback.message.edit_text(
            f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FAQ. –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: 0.\n\n–ë–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_faq_management_keyboard()
        )
    else:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
            reply_markup=get_faq_delete_keyboard()
        ) 

# --- Handler for sending a welcome message to a channel ---

@router.message(Command("send_welcome"))
@router.channel_post(Command("send_welcome"))
async def send_welcome_to_channel(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é –∏ —Ñ–æ—Ç–æ –≤ —á–∞—Ç.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞.
    """
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ ---
    # –î–ª—è –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.chat.type == "private":
        if message.from_user.id not in settings.bot.admin_ids:
            await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.")
            return
    # –î–ª—è –∫–∞–Ω–∞–ª–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º ID –∫–∞–Ω–∞–ª–∞
    elif message.chat.type == "channel":
        if message.chat.id != settings.bot.trusted_channel_id:
            logging.info(f"Ignoring /send_welcome from untrusted channel {message.chat.id}")
            return
    # –í –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–∞—Ö —á–∞—Ç–æ–≤ (–≥—Ä—É–ø–ø–∞—Ö) –∫–æ–º–∞–Ω–¥—É –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º
    else:
        return

    welcome_text = (
        "**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫–∞–Ω–∞–ª ChinaWD!**\n\n"
        "–Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–∫–∞–∑—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ –ö–∏—Ç–∞—è. –ß—Ç–æ –º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å:\n\n"
        "üîπ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:** –ï—Å—Ç—å —Ü–µ–Ω–∞ –∞–≤—Ç–æ –≤ —é–∞–Ω—è—Ö? –î–∞–≤–∞–π—Ç–µ –ø–æ—Å—á–∏—Ç–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –†–§ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Å–±–æ—Ä–æ–≤ –∏ –∫–æ–º–∏—Å—Å–∏–π.\n\n"
        "üîπ **–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:** –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º, –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑? –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É.\n\n"
        "üîπ **–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (FAQ):** –£–∑–Ω–∞–π—Ç–µ –≤—Å—ë –æ —Å—Ä–æ–∫–∞—Ö –¥–æ—Å—Ç–∞–≤–∫–∏, —Å–ø–æ—Å–æ–±–∞—Ö –æ–ø–ª–∞—Ç—ã –∏ –≥–∞—Ä–∞–Ω—Ç–∏—è—Ö.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
    )

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞
    keyboard = kb.get_main_channel_keyboard()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –±–æ—Ç–∞
        profile_photos = await message.bot.get_user_profile_photos(message.bot.id)
        if not profile_photos or not profile_photos.photos:
             raise ValueError("Bot has no profile photo")
             
        # –ë–µ—Ä–µ–º file_id —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo_id = profile_photos.photos[0][-1].file_id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥–ø–∏—Å–∏
        await message.answer_photo(
            photo=photo_id,
            caption=welcome_text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.info(f"Cannot send welcome photo, sending text instead: {e}")
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        await message.answer(welcome_text, parse_mode="Markdown", reply_markup=keyboard)

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
    try:
        await message.delete()
    except Exception:
        # –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å (–Ω–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ –ª–∏—á–Ω—ã–π —á–∞—Ç), –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        pass 