from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from core.config import settings
from keyboards import get_main_inline_keyboard

router = Router()

class RequestState(StatesGroup):
    waiting_for_phone = State()
    waiting_for_comment = State()


def get_phone_request_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    button = KeyboardButton(
        text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        request_contact=True
    )
    return ReplyKeyboardMarkup(keyboard=[[button]], resize_keyboard=True, one_time_keyboard=True)


@router.callback_query(F.data == "main_menu:application")
async def start_request(message: Message | CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏, –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏ –ø–æ deep-link."""
    import asyncio
    
    if isinstance(message, CallbackQuery):
        msg = message.message
        await message.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    else:
        msg = message

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await msg.answer(
        "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. "
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—è–≤–∏—Ç—Å—è –Ω–∏–∂–µ.",
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –î–µ–ª–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ø–∞—É–∑—É
    await asyncio.sleep(4)
    
    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    await msg.answer(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=get_phone_request_keyboard()
    )

    await state.set_state(RequestState.waiting_for_phone)


@router.message(RequestState.waiting_for_phone, F.contact)
async def process_phone_from_contact(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É."""
    await state.update_data(phone=message.contact.phone_number)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç.",
        reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ):")
    await state.set_state(RequestState.waiting_for_comment)


@router.message(RequestState.waiting_for_phone, F.text)
async def process_phone_from_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–∞–∫ —Ç–µ–∫—Å—Ç."""
    await state.update_data(phone=message.text)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç.",
        reply_markup=ReplyKeyboardRemove() # –£–±–∏—Ä–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ):")
    await state.set_state(RequestState.waiting_for_comment)


@router.message(RequestState.waiting_for_comment)
async def process_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å."""
    user_data = await state.get_data()
    user_data['comment'] = message.text
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username
    user_tg_link = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_message = (
        f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
        f"üë§ –ò–º—è: {message.from_user.full_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {user_data['comment']}\n"
        f"TG: {user_tg_link} (ID: {message.from_user.id})"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in settings.bot.admin_ids:
        try:
            await message.bot.send_message(admin_id, admin_message)
        except Exception as e:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.",
        reply_markup=get_main_inline_keyboard(message.from_user.id in settings.bot.admin_ids)
    )
    
    await state.clear() 